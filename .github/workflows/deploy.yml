name: Deploy SimplCommerce to AWS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  TF_VERSION: 1.13.3

jobs:
  terraform:
    name: 'Deploy Infrastructure and Application'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create terraform.tfvars
      run: |
        cat > terraform.tfvars << EOF
        aws_region    = "${{ env.AWS_REGION }}"
        instance_type = "t3.small"
        db_username   = "postgres"
        db_password   = "${{ secrets.DB_PASSWORD }}"
        EOF

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -input=false

    - name: Destroy existing resources first
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: terraform destroy -auto-approve -input=false
      continue-on-error: true

    - name: Terraform Apply (Fresh Deploy)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      id: terraform-apply
      run: terraform apply -auto-approve -input=false

    - name: Get Terraform Outputs
      if: steps.terraform-apply.outcome == 'success'
      run: |
        echo "PUBLIC_IP=$(terraform output -raw public_ip)" >> $GITHUB_ENV
        echo "APPLICATION_URL=$(terraform output -raw application_url)" >> $GITHUB_ENV

    # Removed wait for app step as requested

    - name: Cleanup on Failure (Delete resources in ONLY this deployment's VPC)
      if: failure()
      env:
        AWS_REGION: ${{ env.AWS_REGION }}
      run: |
        echo "Deployment failed, cleaning up resources only in our deployment VPC(s)..."

        # Define a unique tag key and value to identify your deployment VPC(s)
        TAG_KEY="Project"
        TAG_VALUE="SimplCommerce"

        # Find all VPC IDs with this tag
        VPC_IDS=$(aws ec2 describe-vpcs --filters "Name=tag:$TAG_KEY,Values=$TAG_VALUE" --region $AWS_REGION --query "Vpcs[].VpcId" --output text)

        if [ -z "$VPC_IDS" ]; then
          echo "No VPCs found with tag $TAG_KEY=$TAG_VALUE"
        else
          for VPC_ID in $VPC_IDS; do
            echo "Processing VPC $VPC_ID..."

            # Delete Internet Gateways
            IGW_IDS=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --region $AWS_REGION --query "InternetGateways[].InternetGatewayId" --output text)
            for igw in $IGW_IDS; do
              echo "Detaching and deleting IGW $igw"
              aws ec2 detach-internet-gateway --internet-gateway-id $igw --vpc-id $VPC_ID --region $AWS_REGION || echo "Failed to detach IGW $igw"
              aws ec2 delete-internet-gateway --internet-gateway-id $igw --region $AWS_REGION || echo "Failed to delete IGW $igw"
            done

            # Delete Subnets
            SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --region $AWS_REGION --query "Subnets[].SubnetId" --output text)
            for subnet in $SUBNET_IDS; do
              echo "Deleting subnet $subnet"
              aws ec2 delete-subnet --subnet-id $subnet --region $AWS_REGION || echo "Failed to delete subnet $subnet"
            done

            # Delete Route Tables except main
            RTB_IDS=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --region $AWS_REGION --query "RouteTables[?Associations[?Main==`false`]].RouteTableId" --output text)
            for rtb in $RTB_IDS; do
              echo "Deleting route table $rtb"
              aws ec2 delete-route-table --route-table-id $rtb --region $AWS_REGION || echo "Failed to delete route table $rtb"
            done

            # Delete Network ACLs except default
            ACL_IDS=$(aws ec2 describe-network-acls --filters "Name=vpc-id,Values=$VPC_ID" --region $AWS_REGION --query "NetworkAcls[?IsDefault==`false`].NetworkAclId" --output text)
            for acl in $ACL_IDS; do
              echo "Deleting network ACL $acl"
              aws ec2 delete-network-acl --network-acl-id $acl --region $AWS_REGION || echo "Failed to delete network ACL $acl"
            done

            # Delete Security Groups except default
            SG_IDS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --region $AWS_REGION --query "SecurityGroups[?GroupName!='default'].GroupId" --output text)
            for sg in $SG_IDS; do
              echo "Deleting security group $sg"
              aws ec2 delete-security-group --group-id $sg --region $AWS_REGION || echo "Failed to delete security group $sg"
            done

            # Finally delete the VPC itself
            echo "Deleting VPC $VPC_ID"
            aws ec2 delete-vpc --vpc-id $VPC_ID --region $AWS_REGION || echo "Failed to delete VPC $VPC_ID"

          done
        fi

        echo "Running terraform destroy as a final step..."
        terraform destroy -auto-approve -input=false || echo "Terraform destroy failed."

    - name: Post Deployment Summary
      if: steps.terraform-apply.outcome == 'success'
      run: |
        echo "## SimplCommerce Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Access Your Application" >> $GITHUB_STEP_SUMMARY
        echo "**URL:** [${{ env.APPLICATION_URL }}](${{ env.APPLICATION_URL }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Details" >> $GITHUB_STEP_SUMMARY
        echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Public IP | ${{ env.PUBLIC_IP }} |" >> $GITHUB_STEP_SUMMARY
        echo "| SSH Command | \`ssh -i tc.pem ubuntu@${{ env.PUBLIC_IP }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Your SimplCommerce store is now live!"

