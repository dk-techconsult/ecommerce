name: Deploy SimplCommerce to AWS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  TF_VERSION: 1.6.0

jobs:
  terraform:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create terraform.tfvars
      run: |
        cat > terraform.tfvars << EOF
        aws_region    = "${{ env.AWS_REGION }}"
        instance_type = "t3.small"
        db_username   = "postgres"
        db_password   = "${{ secrets.DB_PASSWORD }}"
        EOF

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Plan
      run: terraform plan -input=false

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: terraform apply -auto-approve -input=false

    - name: Get Terraform Outputs
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        echo "PUBLIC_IP=$(terraform output -raw public_ip)" >> $GITHUB_ENV
        echo "APPLICATION_URL=$(terraform output -raw application_url)" >> $GITHUB_ENV

    - name: Wait for Application
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        echo "Waiting for application to be ready at ${{ env.APPLICATION_URL }}"
        for i in {1..30}; do
          if curl -f -s "${{ env.APPLICATION_URL }}" > /dev/null; then
            echo "Application is ready!"
            break
          fi
          echo "Attempt $i/30: Application not ready yet, waiting 30 seconds..."
          sleep 30
        done

    - name: Run Health Check
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        echo "Running health check..."
        if curl -f -s "${{ env.APPLICATION_URL }}" > /dev/null; then
          echo "✅ Health check passed!"
        else
          echo "❌ Health check failed!"
          exit 1
        fi

    - name: Post Deployment Summary
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Public IP** | ${{ env.PUBLIC_IP }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Application URL** | ${{ env.APPLICATION_URL }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Status** | ✅ Deployed Successfully |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Access Your Application" >> $GITHUB_STEP_SUMMARY
        echo "🌐 **Web Interface**: [${{ env.APPLICATION_URL }}](${{ env.APPLICATION_URL }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### SSH Access" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "ssh -i your-private-key.pem ubuntu@${{ env.PUBLIC_IP }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  cleanup:
    name: 'Cleanup Resources (Manual)'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create terraform.tfvars
      run: |
        cat > terraform.tfvars << EOF
        aws_region    = "${{ env.AWS_REGION }}"
        instance_type = "t3.small"
        db_username   = "postgres"
        db_password   = "${{ secrets.DB_PASSWORD }}"
        EOF

    - name: Terraform Init
      run: terraform init

    - name: Terraform Destroy
      run: terraform destroy -auto-approve -input=false
