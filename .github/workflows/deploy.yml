name: Deploy SimplCommerce to AWS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  TF_VERSION: 1.13.3
  ENV_NAME: simplcommerce-demo-${{ github.run_id }}

jobs:
  terraform:
    name: Terraform Destroy & Apply
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate `terraform.tfvars`
      run: |
        cat > terraform.tfvars <<EOF
        aws_region    = "${{ env.AWS_REGION }}"
        instance_type = "t3.small"
        db_username   = "postgres"
        db_password   = "${{ secrets.DB_PASSWORD }}"
        env_name      = "${{ env.ENV_NAME }}"
        EOF

    - name: Terraform Init
      run: terraform init

    - name: Terraform Destroy (force cleanup)
      continue-on-error: true
      run: terraform destroy -auto-approve -input=false

    - name: Wait for RDS Subnet Group Deletion
      run: |
        GROUP_NAME="simplcommerce-subnet-group-${{ env.ENV_NAME }}"
        echo "Waiting for DB Subnet Group '$GROUP_NAME' to be deleted..."
        for i in {1..10}; do
          EXISTS=$(aws rds describe-db-subnet-groups --db-subnet-group-name "$GROUP_NAME" 2>&1 || true)
          if [[ "$EXISTS" == *"DBSubnetGroupNotFoundFault"* ]]; then
            echo "✅ Subnet group deleted."
            break
          fi
          echo "⏳ Still waiting... attempt $i/10"
          sleep 30
        done

    - name: Terraform Apply (Fresh)
      id: terraform-apply
      run: terraform apply -auto-approve -input=false

    - name: Get Terraform Outputs
      if: steps.terraform-apply.outcome == 'success'
      run: |
        echo "PUBLIC_IP=$(terraform output -raw public_ip)" >> $GITHUB_ENV
        echo "APPLICATION_URL=$(terraform output -raw application_url)" >> $GITHUB_ENV

    - name: Cleanup on Failure (Final Attempt)
      if: failure()
      run: terraform destroy -auto-approve -input=false || echo "⚠️ Final cleanup failed."
      continue-on-error: true

    - name: Deployment Summary
      if: steps.terraform-apply.outcome == 'success'
      run: |
        echo "## ✅ SimplCommerce Deployed!" >> $GITHUB_STEP_SUMMARY
        echo "| Public IP | ${{ env.PUBLIC_IP }} |" >> $GITHUB_STEP_SUMMARY
        echo "| URL | [${{ env.APPLICATION_URL }}](${{ env.APPLICATION_URL }}) |" >> $GITHUB_STEP_SUMMARY

